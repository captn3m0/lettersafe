{
  "name": "pson",
  "description": "A super efficient binary serialization format for JSON.",
  "version": "1.0.0",
  "author": {
    "name": "Daniel Wirtz",
    "email": "dcode@dcode.io"
  },
  "main": "PSON.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/dcodeIO/PSON.git"
  },
  "bugs": {
    "url": "https://github.com/dcodeIO/PSON/issues"
  },
  "keywords": [
    "net",
    "buffer",
    "serialization",
    "bytebuffer",
    "websocket",
    "webrtc",
    "json",
    "protobuf",
    "thrift"
  ],
  "license": "Apache-2.0",
  "engines": {
    "node": ">=0.6"
  },
  "dependencies": {
    "bytebuffer": "~2"
  },
  "devDependencies": {
    "preprocessor": "latest",
    "closurecompiler": "latest",
    "testjs": "latest"
  },
  "scripts": {
    "test": "testjs",
    "build": "preprocess src/PSON.js src/ > PSON.js",
    "compile": "ccjs PSON.js > PSON.min.js",
    "jsdoc": "jsdoc -c jsdoc.json",
    "make": "npm run-script build && npm run-script compile && npm test && npm run-script jsdoc"
  },
  "readme": "![PSON](https://raw.github.com/dcodeIO/PSON/master/PSON.png)\r\n====\r\n**PSON** is a super efficient binary serialization format for JSON. It outperforms JSON, BSON, BJSON and, if used\r\nwisely, even protobuf and thrift in encoding size!\r\n\r\nHow does it work?\r\n-----------------\r\nPSON combines the best of JSON, BJSON, ProtoBuf and ZIP to achieve a superior small footprint on the network level.\r\nBasic constants and small integer values are efficiently encoded as a single byte. Other integer values are always\r\nencoded as variable length integers. Additionally it comes with progressive and static dictionaries to reduce data\r\nredundancy to a minimum. In a nutshell:\r\n\r\n* 246 single byte values\r\n* Base 128 variable length integers (varints) as in protobuf\r\n* 32 bit floats instead of 64 bit doubles if possible without information loss\r\n* Progressive and static dictionaries\r\n* Raw binary data support\r\n* Long support\r\n\r\nReference implementation\r\n------------------------\r\nThis repository contains a plain **node.js/CommonJS, RequireJS/AMD and Browser compatible** JavaScript implementation\r\nof the [PSON specification](https://github.com/dcodeIO/PSON/blob/master/PSONspec.txt) on top of \r\n[ByteBuffer.js](https://github.com/dcodeIO/ByteBuffer.js) and optionally [Long.js](https://github.com/dcodeIO/Long.js):\r\n\r\nA **PSON.StaticPair** contains the PSON encoder and decoder for a static (or empty) dictionary and can be shared between\r\nall connections. It's recommended for production.\r\n\r\nA **PSON.ProgressivePair** contains the PSON encoder and decoder for a progressive (automatically filling) dictionary.\r\nOn the one hand this requires no dictionary work from the developer but on the other requires one pair per connection.\r\n\r\ntl;dr Numbers, please!\r\n----------------------\r\nThe test suite contains the following basic example message:\r\n\r\n```json\r\n{\r\n    \"hello\": \"world!\",\r\n    \"time\": 1234567890,\r\n    \"float\": 0.01234,\r\n    \"boolean\": true,\r\n    \"otherbool\": false,\r\n    \"null\": null,\r\n    \"obj\": {\r\n        \"what\": \"that\"\r\n    },\r\n    \"arr\": [1,2,3]\r\n}\r\n```\r\n\r\n* **JSON** stringify: 133 bytes\r\n* **PSON** without a dictionary: 103 bytes (about **22% smaller** than JSON)\r\n* **PSON** with a progressive dictionary: 103 bytes for the first and 59 bytes for each subsequent message (about \r\n  **22% smaller** for the first and about **55% smaller** for each subsequent message than JSON.\r\n* **PSON** with the same but static dictionary: 59 bytes for each message (about **55% smaller** than JSON)\r\n         \r\n```text\r\n F6 08 FE 00 FC 06 77 6F 72 6C 64 21 FE 01 F8 A4   ......world!....\r\n 8B B0 99 79 FE 02 FB F6 0B 76 C3 B6 45 89 3F FE   ...y.....v..E.?.\r\n 03 F1 FE 04 F2 FE 05 F0 FE 06 F6 01 FE 07 FC 04   ................\r\n 74 68 61 74 FE 08 F7 03 02 04 06                  that.......\r\n```\r\n\r\nAnother example that's also contained in the test suite is encoding our package.json, which is of course a string value\r\ncentered file, to PSON using a general purpose static dictionary:\r\n\r\n* **JSON** stringify: 813 bytes\r\n* **PSON** with empty dict: 760 bytes (about **6% smaller** than JSON)\r\n* **PSON** with [static dict](https://github.com/dcodeIO/PSON/blob/master/dicts/package.json): 613 bytes (about **24% smaller** than JSON)\r\n\r\nUsage\r\n-----\r\n\r\n#### node.js/CommonJS\r\n\r\n`npm install pson`\r\n\r\n```js\r\nvar PSON = require(\"pson\");\r\n...\r\n```\r\n\r\n#### RequireJS/AMD\r\n\r\n```js\r\nrequire.config({\r\n    ...\r\n    \"paths\": {\r\n        \"Long\": \"/path/to/Long.js\", // optional\r\n        \"ByteBuffer\": \"/path/to/ByteBuffer.js\",\r\n        \"PSON\": \"/path/to/PSON.js\"\r\n    },\r\n    ...\r\n});\r\nrequire([\"PSON\"], function(PSON) {\r\n    ...\r\n});\r\n```\r\n\r\n#### Browser\r\n\r\n```html\r\n<script src=\"//raw.github.com/dcodeIO/Long.js/master/Long.min.js\"></script><!-- optional -->\r\n<script src=\"//raw.github.com/dcodeIO/ByteBuffer.js/master/ByteBuffer.min.js\"></script>\r\n<script src=\"//raw.github.com/dcodeIO/PSON/master/PSON.min.js\"></script>\r\n```\r\n\r\n```js\r\nvar PSON = dcodeIO.PSON;\r\n...\r\n```\r\n\r\nExample\r\n-------\r\n```js\r\n// Sender\r\nvar initialDictionary = [\"hello\"];\r\nvar pson = new PSON.ProgressivePair(initialDictionary);\r\nvar data = { \"hello\": \"world!\" };\r\nvar buffer = pson.encode(data);\r\nsomeSocket.send(buffer);\r\n```\r\n\r\n```js\r\n// Receiver\r\nvar initialDictionary = [\"hello\"];\r\nvar pson = new PSON.ProgressivePair(initialDictionary);\r\nsomeSocket.on(\"data\", function(data) {\r\n    data = pson.decode(data);\r\n    ...\r\n});\r\n```\r\n\r\nAPI\r\n---\r\nThe API is pretty much straight forward:\r\n\r\n* `PSON.Pair#encode(json: *): ByteBuffer` encodes JSON to PSON data\r\n  * `PSON.Pair#toBuffer(json: *): Buffer` encodes straight to a node.js Buffer\r\n  * `PSON.Pair#toArrayBuffer(json: *): ArrayBuffer` encodes straight to an ArrayBuffer\r\n* `PSON.Pair#decode(pson: ByteBuffer|Buffer|ArrayBuffer): *` decodes PSON data to JSON\r\n\r\n#### Progressive\r\n* `new PSON.ProgressivePair([initialDictionary: Array.<string>])` constructs a new progressive encoder and decoder pair\r\n  with an automatically filling keyword dictionary\r\n* `PSON.ProgressivePair#exclude(obj: Object)` Excludes an object's and its children's keywords from being added to the progressive\r\n   dictionary\r\n* `PSON.ProgressivePair#include(obj: Object)` Undoes the former\r\n\r\n#### Static\r\n* `new PSON.StaticPair([dictionary: Array.<string>])` constructs a new static encoder and decoder pair\r\n  with a static (or empty) dictionary\r\n  \r\nDocumentation\r\n-------------\r\n* [PSON specification](https://github.com/dcodeIO/PSON/blob/master/PSONspec.txt)\r\n* [API documentation](http://htmlpreview.github.io/?http://raw.github.com/dcodeIO/PSON/master/docs/PSON.html)\r\n\r\n**License:** [Apache License, Version 2.0](http://opensource.org/licenses/Apache-2.0)\r\n",
  "readmeFilename": "README.md",
  "_id": "pson@1.0.0",
  "dist": {
    "shasum": "4d874e016dbb8d832cc519bbad78fc7c3dcb52db"
  },
  "_from": "pson@>=0.6.4",
  "_resolved": "http://registry.npmjs.org/pson/-/pson-1.0.0.tgz"
}
